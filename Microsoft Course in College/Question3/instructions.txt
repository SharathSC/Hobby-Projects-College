Question 3:

Implementing good hash functions:

You are tasked with creating a hash table for storing and retrieving Win32 addresses. The addresses are 
8-byte aligned (i.e. they are divisible by 32). You are given a partial implementation of a Hash table 
in the file LinearProbedHashTable.java. The hash table's insert method uses linear probing to find an 
empty slot in case of collisions. However, this class is missing a hash function and a "contains" function. 

Rename Answer.template to Answer.java and complete the hash function and the "contains" function.  Your 
hash function must have the fewest number of collisions. The system will compare it to a benchmark 
implementation. You can assume that the numbers are all positive and non-zero. 

The contains function must retrieve any element that was successfully added to the hash table.  

Observe how linear probing works, in particular, the efficiency. Try different hash functions to see how 
the efficiency of insertion depends on the ability of the hash function to distribute incoming values 
uniformly. Also observe how we use the mod function to treat a linear array as a circular array in the 
insert function.
